// <auto-generated />
//------------------------------------------------------------------------------
// This code is auto-generated.
// Do not attempt to edit this file by hand, you could hurt yourself!
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Diagnostics;
using Type_Config = Buffalo.Core.Lexer.Configuration.Config;
using Type_Rule = Buffalo.Core.Lexer.Configuration.ConfigRule;
using Type_Setting = Buffalo.Core.Lexer.Configuration.ConfigSetting;
using Type_State = Buffalo.Core.Lexer.Configuration.ConfigState;
using Type_Terminal = Buffalo.Core.Lexer.Configuration.ConfigToken;

namespace Buffalo.Core.Lexer.Configuration
{
	internal enum ConfigTokenType
	{
		Assign = 10,
		CloseBrace = 7,
		EOF = 6,
		Error = 5,
		Label = 3,
		OpenBrace = 1,
		Regex = 2,
		Semicolon = 8,
		StateKeyword = 4,
		String = 0,
		TokenKeyword = 9,
	}

	internal abstract class AutoConfigParser
	{
		// [Statistics]
		// Reductions          : 15
		// Terminals           : 11 (11 columns)
		// NonTerminals        : 6 (2 columns)
		// States              : 29
		//   Short Circuited   : 12
		//   With Goto Entries : 5
		//   With SR Conflicts : 4
		//   Other             : 12
		// Transition Table    : 162/377(42.97%)
		//   Primary Offsets   : 29
		//   Goto Offsets      : 5
		//   Actions           : 128
		// Memory Footprint    : 324 bytes
		// Assembly Footprint  : 133 bytes (41.05%)
		protected AutoConfigParser()
		{
			_transitionTable = GetTransitionTable();
		}

		public Type_Config Parse(IEnumerable<Type_Terminal> tokens)
		{
			return Parse(tokens, 0).value_Config;
		}

		State Parse(IEnumerable<Type_Terminal> tokens, int initialState)
		{
			List<State> stack = new List<State>();

			{
				State init = new State();
				init.state = initialState;
				stack.Add(init);
			}

			int state = initialState;

			using (IEnumerator<Type_Terminal> enumerator = tokens.GetEnumerator())
			{
				bool haveToken = enumerator.MoveNext();

				while (haveToken)
				{
					Type_Terminal token = enumerator.Current;
					ConfigTokenType type = GetTokenType(token);

					if (type == ConfigTokenType.Error)
					{
						state = ReduceError(stack, enumerator);
					}
					else
					{
						int offset = _transitionTable[state];
						int action = offset <= 16 ? offset : _transitionTable[offset + (int)type];

						if (action > 16)
						{
							State newState = new State();
							newState.state = state = action - 16;
							newState.value_Terminal = token;

							stack.Add(newState);
							haveToken = enumerator.MoveNext();
						}
						else if (action > 1)
						{
							int reductionId = action - 2;
							state = Reduce(reductionId, stack);
						}
						else if (action == 0 || type != ConfigTokenType.EOF)
						{
							state = ReduceError(stack, enumerator);
						}
						else
						{
							return stack[1];
						}
					}
				}
			}

			throw new InvalidOperationException("ran out of tokens, somehow");
		}

		int Reduce(int reductionId, List<State> stack)
		{
			State newState = new State();
			int gotoIndex;

			switch (reductionId)
			{
				case 4: // <Config> -> <Config> <State>
					newState.value_Config = Reduce_Config_1(stack[stack.Count - 2].value_Config, stack[stack.Count - 1].value_State);
					gotoIndex = 0;
					stack.RemoveRange(stack.Count - 2, 2);
					break;

				case 3: // <Config> -> <Config> Error
					newState.value_Config = Reduce_Config_2(stack[stack.Count - 2].value_Config, stack[stack.Count - 1].value_Terminal);
					gotoIndex = 0;
					stack.RemoveRange(stack.Count - 2, 2);
					break;

				case 1: // <Config> -> <ConfigSettings>
					newState.value_Config = stack[stack.Count - 1].value_Config;
					gotoIndex = 0;
					stack.RemoveAt(stack.Count - 1);
					break;

				case 6: // <ConfigSettings> -> <ConfigSettings> <Setting>
					newState.value_Config = Reduce_ConfigSettings_1(stack[stack.Count - 2].value_Config, stack[stack.Count - 1].value_Setting);
					gotoIndex = 1;
					stack.RemoveRange(stack.Count - 2, 2);
					break;

				case 5: // <ConfigSettings> -> <ConfigSettings> Error
					newState.value_Config = Reduce_ConfigSettings_2(stack[stack.Count - 2].value_Config, stack[stack.Count - 1].value_Terminal);
					gotoIndex = 1;
					stack.RemoveRange(stack.Count - 2, 2);
					break;

				case 2: // <ConfigSettings> -> Error
					newState.value_Config = Reduce_ConfigSettings_3(stack[stack.Count - 1].value_Terminal);
					gotoIndex = 1;
					stack.RemoveAt(stack.Count - 1);
					break;

				case 0: // <ConfigSettings> ->
					newState.value_Config = Reduce_ConfigSettings_4();
					gotoIndex = 1;
					break;

				case 10: // <Setting> -> Label Assign <SettingValue> Semicolon
					newState.value_Setting = Reduce_Setting_1(stack[stack.Count - 4].value_Terminal, stack[stack.Count - 2].value_Terminal);
					gotoIndex = 0;
					stack.RemoveRange(stack.Count - 4, 4);
					break;

				case 8: // <Setting> -> Label Error Semicolon
					newState.value_Setting = Reduce_Setting_2(stack[stack.Count - 2].value_Terminal);
					gotoIndex = 0;
					stack.RemoveRange(stack.Count - 3, 3);
					break;

				case 12: // <State> -> StateKeyword Label OpenBrace <RuleList> CloseBrace
					newState.value_State = Reduce_State_1(stack[stack.Count - 4].value_Terminal, stack[stack.Count - 2].value_State);
					gotoIndex = 0;
					stack.RemoveRange(stack.Count - 5, 5);
					break;

				case 11: // <RuleList> -> <RuleList> <Rule>
					newState.value_State = Reduce_RuleList_1(stack[stack.Count - 2].value_State, stack[stack.Count - 1].value_Rule);
					gotoIndex = 0;
					stack.RemoveRange(stack.Count - 2, 2);
					break;

				case 9: // <RuleList> -> Error
					newState.value_State = Reduce_RuleList_2(stack[stack.Count - 1].value_Terminal);
					gotoIndex = 0;
					stack.RemoveAt(stack.Count - 1);
					break;

				case 7: // <RuleList> ->
					newState.value_State = Reduce_RuleList_3();
					gotoIndex = 0;
					break;

				case 14: // <Rule> -> Regex OpenBrace TokenKeyword Label Semicolon CloseBrace
					newState.value_Rule = Reduce_Rule_1(stack[stack.Count - 6].value_Terminal, stack[stack.Count - 3].value_Terminal);
					gotoIndex = 0;
					stack.RemoveRange(stack.Count - 6, 6);
					break;

				case 13: // <Rule> -> Regex OpenBrace Error CloseBrace
					newState.value_Rule = Reduce_Rule_2(stack[stack.Count - 2].value_Terminal);
					gotoIndex = 0;
					stack.RemoveRange(stack.Count - 4, 4);
					break;

				default: throw new InvalidOperationException("unknown reduction");
			}

			int state = stack[stack.Count - 1].state;
			newState.state = _transitionTable[_transitionTable[state + 29] + gotoIndex];

			stack.Add(newState);

			return newState.state;
		}

		int ReduceError(List<State> stack, IEnumerator<Type_Terminal> enumerator)
		{
			Type_Terminal errorToken = enumerator.Current;

			if (GetTokenType(enumerator.Current) != ConfigTokenType.EOF)
			{
				if (!enumerator.MoveNext())
				{
					throw new InvalidOperationException("ran out of tokens while attempting to recover from a parse error.");
				}
			}

			bool[] failed = new bool[11];

			do
			{
				int state = stack[stack.Count - 1].state;
				int offset = _transitionTable[state];
				int action = offset <= 16 ? offset : _transitionTable[offset + (int)ConfigTokenType.Error];

				if (action == 0 || action > 16)
				{
					break;
				}
				else
				{
					int reductionId = action - 2;
					state = Reduce(reductionId, stack);
				}
			}
			while (true);

			do
			{
				ConfigTokenType nextType = GetTokenType(enumerator.Current);

				if (!failed[(int)nextType])
				{
					for (int i = stack.Count - 1; i >= 0; i--)
					{
						int state = stack[i].state;
						int offset = _transitionTable[state];
						if (offset <= 16) continue;

						int action = _transitionTable[offset + (int)ConfigTokenType.Error] - 16;

						if (action <= 0) continue;
						if (!CanBeFollowedBy(stack, i, action, nextType)) continue;

						State newState = new State();
						newState.state = action;
						newState.value_Terminal = errorToken;

						stack.RemoveRange(i + 1, stack.Count - i - 1);
						stack.Add(newState);
						return action;
					}

					failed[(int)nextType] = true;
				}

				if (nextType == ConfigTokenType.EOF)
				{
					throw new InvalidOperationException("unexpected token: " + GetTokenType(errorToken));
				}
			}
			while (enumerator.MoveNext());

			throw new InvalidOperationException("ran out of tokens while attempting to recover from a parse error.");
		}

		bool CanBeFollowedBy(List<State> stack, int tosIndex, int startState, ConfigTokenType type)
		{
			List<int> overStack = new List<int>();
			overStack.Add(startState);

			int state = startState;

			while (true)
			{
				int offset = _transitionTable[state];
				int action = offset <= 16 ? offset : _transitionTable[offset + (int)type];

				if (action == 0) return false;
				if (action > 16 || action == 1) return true;

				int count;
				int gotoIndex;

				switch (action - 2)
				{
					case 4: // <Config> -> <Config> <State>
						count = 2;
						gotoIndex = 0;
						break;

					case 3: // <Config> -> <Config> Error
						count = 2;
						gotoIndex = 0;
						break;

					case 1: // <Config> -> <ConfigSettings>
						count = 1;
						gotoIndex = 0;
						break;

					case 6: // <ConfigSettings> -> <ConfigSettings> <Setting>
						count = 2;
						gotoIndex = 1;
						break;

					case 5: // <ConfigSettings> -> <ConfigSettings> Error
						count = 2;
						gotoIndex = 1;
						break;

					case 2: // <ConfigSettings> -> Error
						count = 1;
						gotoIndex = 1;
						break;

					case 0: // <ConfigSettings> ->
						count = 0;
						gotoIndex = 1;
						break;

					case 10: // <Setting> -> Label Assign <SettingValue> Semicolon
						count = 4;
						gotoIndex = 0;
						break;

					case 8: // <Setting> -> Label Error Semicolon
						count = 3;
						gotoIndex = 0;
						break;

					case 12: // <State> -> StateKeyword Label OpenBrace <RuleList> CloseBrace
						count = 5;
						gotoIndex = 0;
						break;

					case 11: // <RuleList> -> <RuleList> <Rule>
						count = 2;
						gotoIndex = 0;
						break;

					case 9: // <RuleList> -> Error
						count = 1;
						gotoIndex = 0;
						break;

					case 7: // <RuleList> ->
						count = 0;
						gotoIndex = 0;
						break;

					case 14: // <Rule> -> Regex OpenBrace TokenKeyword Label Semicolon CloseBrace
						count = 6;
						gotoIndex = 0;
						break;

					case 13: // <Rule> -> Regex OpenBrace Error CloseBrace
						count = 4;
						gotoIndex = 0;
						break;

					default: throw new InvalidOperationException("unknown reduction");
				}

				if (count >= overStack.Count)
				{
					tosIndex = tosIndex - count + overStack.Count;
					overStack.Clear();

					state = stack[tosIndex].state;
				}
				else if (count > 0)
				{
					overStack.RemoveRange(overStack.Count - count, count);

					state = overStack[overStack.Count - 1];
				}

				overStack.Add(state = _transitionTable[_transitionTable[state + 29] + gotoIndex]);
			}
		}

		static ushort[] Expand(string resourceName)
		{
			using (System.IO.Stream stream = System.Reflection.Assembly.GetExecutingAssembly().GetManifestResourceStream(resourceName))
			{
				const byte FOLLOW = 0x80;
				const byte REPEAT = 0x40;
				const byte FIRSTBODY = 0x3F;
				const byte SUBBODY = 0x7F;

				int value;
				byte tmp;

				tmp = unchecked((byte)stream.ReadByte());
				value = tmp & FIRSTBODY;

				while ((tmp & FOLLOW) != 0)
				{
					tmp = unchecked((byte)stream.ReadByte());
					value = (value << 7) | (tmp & SUBBODY);
				}

				int write = 0;
				ushort[] result = new ushort[value];

				while (stream.Position < stream.Length)
				{
					tmp = unchecked((byte)stream.ReadByte());
					if ((tmp & REPEAT) == 0)
					{
						value = tmp & FIRSTBODY;

						while ((tmp & FOLLOW) != 0)
						{
							tmp = unchecked((byte)stream.ReadByte());
							value = (value << 7) | (tmp & SUBBODY);
						}

						result[write++] = unchecked((ushort)value);
					}
					else
					{
						int count = tmp & FIRSTBODY;

						while ((tmp & FOLLOW) != 0)
						{
							tmp = unchecked((byte)stream.ReadByte());
							count = (count << 7) | (tmp & SUBBODY);
						}

						tmp = unchecked((byte)stream.ReadByte());
						value = tmp & FIRSTBODY;

						while ((tmp & FOLLOW) != 0)
						{
							tmp = unchecked((byte)stream.ReadByte());
							value = (value << 7) | (tmp & SUBBODY);
						}

						while (count > 0)
						{
							result[write++] = unchecked((ushort)value);
							count--;
						}
					}
				}

				return result;
			}
		}

		protected abstract ConfigTokenType GetTokenType(Type_Terminal terminal);

		protected abstract Type_Config Reduce_Config_1(Type_Config configSeg, Type_State stateSeg);
		protected abstract Type_Config Reduce_Config_2(Type_Config configSeg, Type_Terminal errorSeg);
		protected abstract Type_Config Reduce_ConfigSettings_1(Type_Config configSettingsSeg, Type_Setting settingSeg);
		protected abstract Type_Config Reduce_ConfigSettings_2(Type_Config configSettingsSeg, Type_Terminal errorSeg);
		protected abstract Type_Config Reduce_ConfigSettings_3(Type_Terminal errorSeg);
		protected abstract Type_Config Reduce_ConfigSettings_4();
		protected abstract Type_Setting Reduce_Setting_1(Type_Terminal labelSeg, Type_Terminal settingValueSeg);
		protected abstract Type_Setting Reduce_Setting_2(Type_Terminal errorSeg);
		protected abstract Type_State Reduce_State_1(Type_Terminal labelSeg, Type_State ruleListSeg);
		protected abstract Type_State Reduce_RuleList_1(Type_State ruleListSeg, Type_Rule ruleSeg);
		protected abstract Type_State Reduce_RuleList_2(Type_Terminal errorSeg);
		protected abstract Type_State Reduce_RuleList_3();
		protected abstract Type_Rule Reduce_Rule_1(Type_Terminal regexSeg, Type_Terminal labelSeg);
		protected abstract Type_Rule Reduce_Rule_2(Type_Terminal errorSeg);

		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		readonly ushort[] _transitionTable;

		struct State
		{
			public int state;
			public Type_Config value_Config;
			public Type_Rule value_Rule;
			public Type_Setting value_Setting;
			public Type_State value_State;
			public Type_Terminal value_Terminal;
		}

		static ushort[] GetTransitionTable()
		{
			ushort[] result;

			lock (_weakRef)
			{
				if ((result = (ushort[])_weakRef.Target) == null)
				{
					_weakRef.Target = result = Expand("Buffalo.Core.Lexer.Configuration.AutoConfigParser.table");
				}
			}

			return result;
		}

		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		static readonly WeakReference _weakRef = new WeakReference(null);
	}
}
