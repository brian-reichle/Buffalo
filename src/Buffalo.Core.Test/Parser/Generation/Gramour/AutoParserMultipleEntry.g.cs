// <auto-generated />
//------------------------------------------------------------------------------
// This code is auto-generated.
// Do not attempt to edit this file by hand, you could hurt yourself!
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Diagnostics;
using Type_Bool = System.Boolean;
using Type_Int = System.Int32;
using Type_Token = Buffalo.Core.Test.Token;

namespace Buffalo.Generated.MultipleEntry
{
	internal enum TokenType
	{
		Add = 3,
		CloseParen = 4,
		Divide = 6,
		EOF = 2,
		EqualTo = 1,
		Multiply = 6 + (1 << 3),
		Number = 0,
		OpenParen = 5,
		Subtract = 3 + (1 << 3),
	}

	internal abstract class AutoParser
	{
		const TokenType ColumnMask = (TokenType)7;

		// [Statistics]
		// Reductions          : 6
		// Terminals           : 9 (7 columns)
		// NonTerminals        : 4 (3 columns)
		// States              : 16
		//   Short Circuited   : 4
		//   With Goto Entries : 6
		//   With SR Conflicts : 4
		//   Other             : 2
		// Transition Table    : 73/160(45.63%)
		//   Primary Offsets   : 16
		//   Goto Offsets      : 6
		//   Actions           : 51
		// Memory Footprint    : 146 bytes
		// Assembly Footprint  : 138 bytes (94.52%)
		protected AutoParser()
		{
			_transitionTable = GetTransitionTable();
		}

		public Type_Bool Parse_Equation(IEnumerable<Type_Token> tokens)
		{
			return (Type_Bool)Parse(tokens, 0).value;
		}

		public Type_Int Parse_Expression(IEnumerable<Type_Token> tokens)
		{
			return (Type_Int)Parse(tokens, 1).value;
		}

		State Parse(IEnumerable<Type_Token> tokens, int initialState)
		{
			List<State> stack = new List<State>();

			{
				State init = new State();
				init.state = initialState;
				stack.Add(init);
			}

			int state = initialState;

			using (IEnumerator<Type_Token> enumerator = tokens.GetEnumerator())
			{
				bool haveToken = enumerator.MoveNext();

				while (haveToken)
				{
					Type_Token token = enumerator.Current;
					TokenType type = GetTokenType(token);

					{
						int offset = _transitionTable[state];
						int action = offset <= 7 ? offset : _transitionTable[offset + (int)(type & ColumnMask)];

						if (action > 7)
						{
							State newState = new State();
							newState.state = state = action - 7;
							newState.value = token;

							stack.Add(newState);
							haveToken = enumerator.MoveNext();
						}
						else if (action > 1)
						{
							int reductionId = action - 2;
							state = Reduce(reductionId, stack);
						}
						else if (action == 0 || type != TokenType.EOF)
						{
							UnexpectedToken(token);
							throw new InvalidOperationException("unexpected token: " + type);
						}
						else
						{
							return stack[1];
						}
					}
				}
			}

			throw new InvalidOperationException("ran out of tokens, somehow");
		}

		int Reduce(int reductionId, List<State> stack)
		{
			State newState = new State();
			int gotoIndex;

			switch (reductionId)
			{
				case 2: // <Equation> -> <Expression> EqualTo <Expression>
					newState.value = Reduce_Equation_1((Type_Int)stack[stack.Count - 3].value, (Type_Token)stack[stack.Count - 2].value, (Type_Int)stack[stack.Count - 1].value);
					gotoIndex = 2;
					stack.RemoveRange(stack.Count - 3, 3);
					break;

				case 3: // <Expression> -> <Expression> <TermOp> <Term>
					newState.value = Reduce_Expression_1((Type_Int)stack[stack.Count - 3].value, (Type_Token)stack[stack.Count - 2].value, (Type_Int)stack[stack.Count - 1].value);
					gotoIndex = 1;
					stack.RemoveRange(stack.Count - 3, 3);
					break;

				case 0: // <Expression> -> <Term>
					newState.value = (Type_Int)stack[stack.Count - 1].value;
					gotoIndex = 1;
					stack.RemoveAt(stack.Count - 1);
					break;

				case 4: // <Term> -> <Term> <FactorOp> <Factor>
					newState.value = Reduce_Term_1((Type_Int)stack[stack.Count - 3].value, (Type_Token)stack[stack.Count - 2].value, (Type_Int)stack[stack.Count - 1].value);
					gotoIndex = 0;
					stack.RemoveRange(stack.Count - 3, 3);
					break;

				case 1: // <Factor> -> Number
					newState.value = Reduce_Factor_1((Type_Token)stack[stack.Count - 1].value);
					gotoIndex = 0;
					stack.RemoveAt(stack.Count - 1);
					break;

				case 5: // <Factor> -> OpenParen <Expression> CloseParen
					newState.value = (Type_Int)stack[stack.Count - 2].value;
					gotoIndex = 0;
					stack.RemoveRange(stack.Count - 3, 3);
					break;

				default: throw new InvalidOperationException("unknown reduction");
			}

			int state = stack[stack.Count - 1].state;
			newState.state = _transitionTable[_transitionTable[state + 16] + gotoIndex];

			stack.Add(newState);

			return newState.state;
		}

		protected virtual void UnexpectedToken(Type_Token terminal)
		{
		}

		static ushort[] Expand(string resourceName)
		{
			using (System.IO.Stream stream = System.Reflection.Assembly.GetExecutingAssembly().GetManifestResourceStream(resourceName))
			using (System.IO.BinaryReader reader = new System.IO.BinaryReader(stream))
			{
				ushort[] result = new ushort[reader.ReadUInt16()];
				ushort escape = reader.ReadUInt16();

				int w = 0;
				while (stream.Position < stream.Length)
				{
					ushort value = reader.ReadUInt16();

					if (value == escape)
					{
						ushort count = reader.ReadUInt16();
						value = reader.ReadUInt16();

						while (count > 0)
						{
							result[w++] = value;
							count--;
						}
					}
					else
					{
						result[w++] = value;
					}
				}

				return result;
			}
		}

		protected abstract TokenType GetTokenType(Type_Token terminal);

		protected abstract Type_Bool Reduce_Equation_1(Type_Int expressionSeg1, Type_Token equalToSeg, Type_Int expressionSeg2);
		protected abstract Type_Int Reduce_Expression_1(Type_Int expressionSeg, Type_Token termOpSeg, Type_Int termSeg);
		protected abstract Type_Int Reduce_Term_1(Type_Int termSeg, Type_Token factorOpSeg, Type_Int factorSeg);
		protected abstract Type_Int Reduce_Factor_1(Type_Token numberSeg);

		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		readonly ushort[] _transitionTable;

		struct State
		{
			public int state;
			public object value;
		}

		static ushort[] GetTransitionTable()
		{
			return Expand("Buffalo.Core.Test.Parser.Generation.Gramour.AutoParserMultipleEntry.table");
		}
	}
}
